import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.1.0'
    }
}

plugins {
    id "eclipse"
    id "jacoco"
    id "java-library"
    id "maven-publish"
    id "org.ajoberstar.github-pages" version "1.7.2"
    id "signing"
}

def getProperty = { property ->
    if (!project.hasProperty(property)) {
        throw new GradleException("${property} property must be set")
    }
    return project.property(property)
}

group = "com.pusher"
version = "2.2.8"
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext.sharedManifest = manifest {
    attributes(
        'Created-By'            : 'Pusher',
        'Implementation-Vendor' : 'Pusher',
        'Implementation-Title'  : 'Pusher Java Websocket API Example',
        'Implementation-Version': version,
        'Package'               : 'com.pusher.client.example',
        'Main-Class'            : 'com.pusher.client.example.ExampleApp'
    )
}


repositories {
    mavenCentral()
}

dependencies {
    implementation "com.google.code.gson:gson:2.8.9"
    implementation "org.java-websocket:Java-WebSocket:1.5.1"

    testImplementation "org.mockito:mockito-all:1.8.5"
    testImplementation "org.powermock:powermock-module-junit4:1.4.11"
    testImplementation "org.powermock:powermock-api-mockito:1.4.11"
    testImplementation "com.google.truth:truth:1.0.1"
}


processResources {
    filter(ReplaceTokens, tokens: [
        version: project.version
    ] )
}


javadoc {
    /* info for JavaDoc options http://docs.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html#overviewcomment */
    title "Pusher Java Websocket API"
    options.overview = file("src/main/javadoc/overview.html")
    // uncomment this to use the custom javadoc styles
    //options.stylesheetFile = file("src/main/javadoc/css/styles.css")
    exclude "com/pusher/client/channel/impl/*"
    exclude "com/pusher/client/connection/impl/*"
    exclude "com/pusher/client/connection/websocket/*"
    exclude "com/pusher/client/crypto/nacl/*"
    exclude "com/pusher/client/util/internal/*"
    exclude "org/java_websocket/*"
    exclude "com/pusher/client/example/*"
    options.linkSource = true
}


jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

task fatJar(type: Jar, dependsOn:configurations.runtimeClasspath) {
    manifest = project.manifest {
        from sharedManifest
    }
    archiveBaseName.set(project.name + '-with-dependencies')
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    archiveClassifier.set('jar-with-dependencies')
}
assemble.dependsOn fatJar


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}
assemble.dependsOn sourcesJar


task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}
assemble.dependsOn javadocJar

githubPages {
    repoUri = 'https://github.com/pusher/pusher-websocket-java.git'
    pages {
        from javadoc.outputs.files
    }
    commitMessage = "JavaDoc gh-pages for ${version}"
    credentials {
        username = { getProperty("github.username") }
        password = { getProperty("github.password") }
    }
}

artifacts {
    archives jar, fatJar, sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'pusher-java-client'

            from components.java
            pom {
                name = 'Pusher Java Client Library'
                packaging = 'jar'
                artifactId = 'pusher-java-client'
                description = 'This is a Java client library for Pusher, targeted at core Java and Android.'
                url = 'http://github.com/pusher/pusher-websocket-java'
                scm {
                    connection = 'scm:git:git@github.com:pusher/pusher-websocket-java'
                    developerConnection = 'scm:git:git@github.com:pusher/pusher-websocket-java'
                    url = 'http://github.com/pusher/pusher-websocket-java'
                }
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://raw.github.com/pusher/pusher-websocket-java/master/LICENCE.txt'
                        distribution = 'https://raw.github.com/pusher/pusher-websocket-java/mvn-repo/'
                    }
                }
                organization {
                    name = 'Pusher'
                    url = 'http://pusher.com'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/pusher/pusher-websocket-java/issues'
                }
                developers {
                    developer {
                        id = 'mike'
                        name = 'Mike Pye'
                        email = 'mike@pusher.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotRepositoryUrl : releaseRepositoryUrl
            credentials {
                username = findProperty("maven.username") ?: ""
                password = findProperty("maven.password") ?: ""
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports.xml.required = true
    reports.html.required = false
    reports.csv.required = false
}

// Test Logging - https://stackoverflow.com/a/42425815/2623314
test {
    testLogging {
        showStandardStreams = true
    }
}
